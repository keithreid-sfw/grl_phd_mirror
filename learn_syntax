# classes

setClass("Config",
         representation(verbose   = "logical",
                        visual    = "logical",
                        testing   = "logical"))

# config

set_config <- function() {
  config <- new("Config", verbose   = FALSE,
                          visual    = FALSE,
                          testing   = TRUE)
}

# variable settings
get_r <- function () {
  r <- 7 # based on CGI
}

get_s <- function () {
  s <- 4
}

get_t <- function () {
  t <- 5
}

# model

init_options <- function() {
  options <- list(c(0,1),c(1,0),c(1,1))
}

# view

maybe_tell_config <- function(config) {
  if (config@verbose) {
    print("here is the configuration")
    print(str(config))
  } else {
    print("config not verbose")
  }
}

maybe_tell_options <- function (config, options) {
  if (config@verbose) {
    print(str(options))
  }
}

# control

main <- function() {
  
  # set up the primitive invariants
  config <- set_config()
  maybe_tell_config(config)
  
  options = init_options()
  maybe_tell_options(config, options)
  
  r <- get_r()
  s <- get_s()
  t <- get_t()
  
  # derive secondary invariants
  
  n <- s + t
  
  
}

main()

test_init_options <- function() {
  options = init_options()
  if(!inherits(options, "list")) {
    stop("options should be a list")}   
  else {
    print("options passed inheritance")
  }
}

maybe_tests <- function() {
  config <- set_config()
  if (config@testing) {
    print("testing")
    test_init_options()
    print("passed all tests")
  }
  else {
    print("not testing")
  }
}

maybe_tests()
